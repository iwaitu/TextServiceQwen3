# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import text_service_pb2 as text__service__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in text_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TextGrpcServiceStub(object):
    """文本服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimpleRerank = channel.unary_unary(
                '/text_service.TextGrpcService/SimpleRerank',
                request_serializer=text__service__pb2.SimpleRerankRequest.SerializeToString,
                response_deserializer=text__service__pb2.SimpleRerankResponse.FromString,
                _registered_method=True)
        self.EmbedText = channel.unary_unary(
                '/text_service.TextGrpcService/EmbedText',
                request_serializer=text__service__pb2.EmbedTextRequest.SerializeToString,
                response_deserializer=text__service__pb2.EmbedTextResponse.FromString,
                _registered_method=True)
        self.SplitTextIntoChunks = channel.unary_unary(
                '/text_service.TextGrpcService/SplitTextIntoChunks',
                request_serializer=text__service__pb2.SplitTextRequest.SerializeToString,
                response_deserializer=text__service__pb2.SplitTextResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/text_service.TextGrpcService/HealthCheck',
                request_serializer=text__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=text__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetModelInfo = channel.unary_unary(
                '/text_service.TextGrpcService/GetModelInfo',
                request_serializer=text__service__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=text__service__pb2.ModelInfoResponse.FromString,
                _registered_method=True)


class TextGrpcServiceServicer(object):
    """文本服务定义
    """

    def SimpleRerank(self, request, context):
        """文本重排序
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmbedText(self, request, context):
        """文本嵌入向量生成
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SplitTextIntoChunks(self, request, context):
        """文本分块
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """模型信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGrpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimpleRerank': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleRerank,
                    request_deserializer=text__service__pb2.SimpleRerankRequest.FromString,
                    response_serializer=text__service__pb2.SimpleRerankResponse.SerializeToString,
            ),
            'EmbedText': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedText,
                    request_deserializer=text__service__pb2.EmbedTextRequest.FromString,
                    response_serializer=text__service__pb2.EmbedTextResponse.SerializeToString,
            ),
            'SplitTextIntoChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitTextIntoChunks,
                    request_deserializer=text__service__pb2.SplitTextRequest.FromString,
                    response_serializer=text__service__pb2.SplitTextResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=text__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=text__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=text__service__pb2.ModelInfoRequest.FromString,
                    response_serializer=text__service__pb2.ModelInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'text_service.TextGrpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('text_service.TextGrpcService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TextGrpcService(object):
    """文本服务定义
    """

    @staticmethod
    def SimpleRerank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/text_service.TextGrpcService/SimpleRerank',
            text__service__pb2.SimpleRerankRequest.SerializeToString,
            text__service__pb2.SimpleRerankResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmbedText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/text_service.TextGrpcService/EmbedText',
            text__service__pb2.EmbedTextRequest.SerializeToString,
            text__service__pb2.EmbedTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SplitTextIntoChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/text_service.TextGrpcService/SplitTextIntoChunks',
            text__service__pb2.SplitTextRequest.SerializeToString,
            text__service__pb2.SplitTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/text_service.TextGrpcService/HealthCheck',
            text__service__pb2.HealthCheckRequest.SerializeToString,
            text__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/text_service.TextGrpcService/GetModelInfo',
            text__service__pb2.ModelInfoRequest.SerializeToString,
            text__service__pb2.ModelInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
